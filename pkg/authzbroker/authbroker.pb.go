// Copyright 2020 Hewlett Packard Enterprise Development LP

//protoc v1.proto --go_out=plugins=grpc:./
// mockgen -source=./api/v1.pb.go  -self_package=github.com/hpe-hcss/hpcaas-job-scheduler/internal/pkg/authz-broker/mock -destination=./mock/mockauthz.go -package=mock

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.3.0
// source: authbroker.proto

package api

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthBrokerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *AuthBrokerRequest) Reset() {
	*x = AuthBrokerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthBrokerRequest) ProtoMessage() {}

func (x *AuthBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthBrokerRequest.ProtoReflect.Descriptor instead.
func (*AuthBrokerRequest) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{0}
}

func (x *AuthBrokerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type Appliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// appliance on which assignment is needed.
	ApplianceName string `protobuf:"bytes,2,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// appliance sso url.
	SsoAppUrl string `protobuf:"bytes,3,opt,name=sso_app_url,json=ssoAppUrl,proto3" json:"sso_app_url,omitempty"`
	// appliance id
	ApplianceId string `protobuf:"bytes,4,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// site id
	SiteId string `protobuf:"bytes,5,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
}

func (x *Appliance) Reset() {
	*x = Appliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appliance) ProtoMessage() {}

func (x *Appliance) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appliance.ProtoReflect.Descriptor instead.
func (*Appliance) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{1}
}

func (x *Appliance) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Appliance) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *Appliance) GetSsoAppUrl() string {
	if x != nil {
		return x.SsoAppUrl
	}
	return ""
}

func (x *Appliance) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *Appliance) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type Appliances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of appliances
	Appliance []*Appliance `protobuf:"bytes,1,rep,name=appliance,proto3" json:"appliance,omitempty"`
}

func (x *Appliances) Reset() {
	*x = Appliances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appliances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appliances) ProtoMessage() {}

func (x *Appliances) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appliances.ProtoReflect.Descriptor instead.
func (*Appliances) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{2}
}

func (x *Appliances) GetAppliance() []*Appliance {
	if x != nil {
		return x.Appliance
	}
	return nil
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{3}
}

func (x *Tenant) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type AppAssignerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// appliance on which assignment is needed.
	ApplianceId string `protobuf:"bytes,2,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// type of resource which need to assign on appliance
	ResourceType string `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// id of resource which need to assign on appliance
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *AppAssignerRequest) Reset() {
	*x = AppAssignerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAssignerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAssignerRequest) ProtoMessage() {}

func (x *AppAssignerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAssignerRequest.ProtoReflect.Descriptor instead.
func (*AppAssignerRequest) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{4}
}

func (x *AppAssignerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AppAssignerRequest) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *AppAssignerRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AppAssignerRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type AppSAMLClaimMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// appliance on which assignment is needed.
	ApplianceId string `protobuf:"bytes,2,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// type of resource which need to assign on appliance
	ResourceType string `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// id of resource which need to assign on appliance
	ResourceId string `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *AppSAMLClaimMappings) Reset() {
	*x = AppSAMLClaimMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSAMLClaimMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSAMLClaimMappings) ProtoMessage() {}

func (x *AppSAMLClaimMappings) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSAMLClaimMappings.ProtoReflect.Descriptor instead.
func (*AppSAMLClaimMappings) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{5}
}

func (x *AppSAMLClaimMappings) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AppSAMLClaimMappings) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *AppSAMLClaimMappings) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AppSAMLClaimMappings) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type SAMLConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenant id
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// appliance on which assignment is needed.
	ApplianceEndpoint string `protobuf:"bytes,2,opt,name=appliance_endpoint,json=applianceEndpoint,proto3" json:"appliance_endpoint,omitempty"`
	// appliance id
	ApplianceId string `protobuf:"bytes,3,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
}

func (x *SAMLConfigRequest) Reset() {
	*x = SAMLConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConfigRequest) ProtoMessage() {}

func (x *SAMLConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConfigRequest.ProtoReflect.Descriptor instead.
func (*SAMLConfigRequest) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{6}
}

func (x *SAMLConfigRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SAMLConfigRequest) GetApplianceEndpoint() string {
	if x != nil {
		return x.ApplianceEndpoint
	}
	return ""
}

func (x *SAMLConfigRequest) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

type EmptyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReply) Reset() {
	*x = EmptyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authbroker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReply) ProtoMessage() {}

func (x *EmptyReply) ProtoReflect() protoreflect.Message {
	mi := &file_authbroker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReply.ProtoReflect.Descriptor instead.
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return file_authbroker_proto_rawDescGZIP(), []int{7}
}

var File_authbroker_proto protoreflect.FileDescriptor

var file_authbroker_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x30, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x73, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x73, 0x6f, 0x41, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x8a, 0x06, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x14, 0x44, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x6e,
	0x48, 0x63, 0x70, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x6e, 0x48, 0x43, 0x50, 0x12, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authbroker_proto_rawDescOnce sync.Once
	file_authbroker_proto_rawDescData = file_authbroker_proto_rawDesc
)

func file_authbroker_proto_rawDescGZIP() []byte {
	file_authbroker_proto_rawDescOnce.Do(func() {
		file_authbroker_proto_rawDescData = protoimpl.X.CompressGZIP(file_authbroker_proto_rawDescData)
	})
	return file_authbroker_proto_rawDescData
}

var file_authbroker_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_authbroker_proto_goTypes = []interface{}{
	(*AuthBrokerRequest)(nil),    // 0: api.AuthBrokerRequest
	(*Appliance)(nil),            // 1: api.Appliance
	(*Appliances)(nil),           // 2: api.Appliances
	(*Tenant)(nil),               // 3: api.Tenant
	(*AppAssignerRequest)(nil),   // 4: api.AppAssignerRequest
	(*AppSAMLClaimMappings)(nil), // 5: api.AppSAMLClaimMappings
	(*SAMLConfigRequest)(nil),    // 6: api.SAMLConfigRequest
	(*EmptyReply)(nil),           // 7: api.EmptyReply
}
var file_authbroker_proto_depIdxs = []int32{
	1,  // 0: api.Appliances.appliance:type_name -> api.Appliance
	4,  // 1: api.ApplianceService.AddSAMLAppAssignments:input_type -> api.AppAssignerRequest
	5,  // 2: api.ApplianceService.AddSAMLClaimMappings:input_type -> api.AppSAMLClaimMappings
	4,  // 3: api.ApplianceService.RemoveSAMLAppAssignments:input_type -> api.AppAssignerRequest
	5,  // 4: api.ApplianceService.RemoveSAMLClaimMappings:input_type -> api.AppSAMLClaimMappings
	1,  // 5: api.ApplianceService.CreateAppliance:input_type -> api.Appliance
	1,  // 6: api.ApplianceService.GetAppliance:input_type -> api.Appliance
	3,  // 7: api.ApplianceService.ListAppliances:input_type -> api.Tenant
	1,  // 8: api.ApplianceService.DeleteAppliance:input_type -> api.Appliance
	0,  // 9: api.ApplianceService.RegisterAuthBroker:input_type -> api.AuthBrokerRequest
	0,  // 10: api.ApplianceService.DeRegisterAuthBroker:input_type -> api.AuthBrokerRequest
	6,  // 11: api.ApplianceService.ConfigureSAMLInHcp:input_type -> api.SAMLConfigRequest
	6,  // 12: api.ApplianceService.RemoveSiteAdminClaimInHCP:input_type -> api.SAMLConfigRequest
	7,  // 13: api.ApplianceService.AddSAMLAppAssignments:output_type -> api.EmptyReply
	7,  // 14: api.ApplianceService.AddSAMLClaimMappings:output_type -> api.EmptyReply
	7,  // 15: api.ApplianceService.RemoveSAMLAppAssignments:output_type -> api.EmptyReply
	7,  // 16: api.ApplianceService.RemoveSAMLClaimMappings:output_type -> api.EmptyReply
	1,  // 17: api.ApplianceService.CreateAppliance:output_type -> api.Appliance
	1,  // 18: api.ApplianceService.GetAppliance:output_type -> api.Appliance
	2,  // 19: api.ApplianceService.ListAppliances:output_type -> api.Appliances
	7,  // 20: api.ApplianceService.DeleteAppliance:output_type -> api.EmptyReply
	7,  // 21: api.ApplianceService.RegisterAuthBroker:output_type -> api.EmptyReply
	7,  // 22: api.ApplianceService.DeRegisterAuthBroker:output_type -> api.EmptyReply
	7,  // 23: api.ApplianceService.ConfigureSAMLInHcp:output_type -> api.EmptyReply
	7,  // 24: api.ApplianceService.RemoveSiteAdminClaimInHCP:output_type -> api.EmptyReply
	13, // [13:25] is the sub-list for method output_type
	1,  // [1:13] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_authbroker_proto_init() }
func file_authbroker_proto_init() {
	if File_authbroker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_authbroker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthBrokerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appliances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAssignerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSAMLClaimMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authbroker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authbroker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authbroker_proto_goTypes,
		DependencyIndexes: file_authbroker_proto_depIdxs,
		MessageInfos:      file_authbroker_proto_msgTypes,
	}.Build()
	File_authbroker_proto = out.File
	file_authbroker_proto_rawDesc = nil
	file_authbroker_proto_goTypes = nil
	file_authbroker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApplianceServiceClient is the client API for ApplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplianceServiceClient interface {
	// AddSAMLAppAssignments used to add resource for app assignment
	AddSAMLAppAssignments(ctx context.Context, in *AppAssignerRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// AddSAMLClaimMappings add saml claim mappings
	AddSAMLClaimMappings(ctx context.Context, in *AppSAMLClaimMappings, opts ...grpc.CallOption) (*EmptyReply, error)
	// RemoveSAMLAppAssignments used to remove resource for app assignment
	RemoveSAMLAppAssignments(ctx context.Context, in *AppAssignerRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// RemoveSAMLClaimMappings remove saml claim mappings
	RemoveSAMLClaimMappings(ctx context.Context, in *AppSAMLClaimMappings, opts ...grpc.CallOption) (*EmptyReply, error)
	// CreateAppliance creates SAML application
	CreateAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*Appliance, error)
	// GetAppliance get SAML application
	GetAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*Appliance, error)
	// ListAppliances lists  application
	ListAppliances(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Appliances, error)
	// DeleteAppliance deletes application
	DeleteAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*EmptyReply, error)
	// RegisterAuthBroker registers Authbroker and HPCaas Roles for the given Tenant
	RegisterAuthBroker(ctx context.Context, in *AuthBrokerRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// DeRegisterAuthBroker unregisters Authbroker and HPCaas Roles for the given Tenant
	DeRegisterAuthBroker(ctx context.Context, in *AuthBrokerRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// ConfigureSAMLInHcp configures SAML in HCP
	ConfigureSAMLInHcp(ctx context.Context, in *SAMLConfigRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// RemoveSiteAdminClaimInHCP removes Siteadmin Claim in HCP
	RemoveSiteAdminClaimInHCP(ctx context.Context, in *SAMLConfigRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type applianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplianceServiceClient(cc grpc.ClientConnInterface) ApplianceServiceClient {
	return &applianceServiceClient{cc}
}

func (c *applianceServiceClient) AddSAMLAppAssignments(ctx context.Context, in *AppAssignerRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/AddSAMLAppAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) AddSAMLClaimMappings(ctx context.Context, in *AppSAMLClaimMappings, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/AddSAMLClaimMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) RemoveSAMLAppAssignments(ctx context.Context, in *AppAssignerRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/RemoveSAMLAppAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) RemoveSAMLClaimMappings(ctx context.Context, in *AppSAMLClaimMappings, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/RemoveSAMLClaimMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) CreateAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*Appliance, error) {
	out := new(Appliance)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/CreateAppliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) GetAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*Appliance, error) {
	out := new(Appliance)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/GetAppliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) ListAppliances(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Appliances, error) {
	out := new(Appliances)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/ListAppliances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) DeleteAppliance(ctx context.Context, in *Appliance, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/DeleteAppliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) RegisterAuthBroker(ctx context.Context, in *AuthBrokerRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/RegisterAuthBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) DeRegisterAuthBroker(ctx context.Context, in *AuthBrokerRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/DeRegisterAuthBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) ConfigureSAMLInHcp(ctx context.Context, in *SAMLConfigRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/ConfigureSAMLInHcp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applianceServiceClient) RemoveSiteAdminClaimInHCP(ctx context.Context, in *SAMLConfigRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.ApplianceService/RemoveSiteAdminClaimInHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplianceServiceServer is the server API for ApplianceService service.
type ApplianceServiceServer interface {
	// AddSAMLAppAssignments used to add resource for app assignment
	AddSAMLAppAssignments(context.Context, *AppAssignerRequest) (*EmptyReply, error)
	// AddSAMLClaimMappings add saml claim mappings
	AddSAMLClaimMappings(context.Context, *AppSAMLClaimMappings) (*EmptyReply, error)
	// RemoveSAMLAppAssignments used to remove resource for app assignment
	RemoveSAMLAppAssignments(context.Context, *AppAssignerRequest) (*EmptyReply, error)
	// RemoveSAMLClaimMappings remove saml claim mappings
	RemoveSAMLClaimMappings(context.Context, *AppSAMLClaimMappings) (*EmptyReply, error)
	// CreateAppliance creates SAML application
	CreateAppliance(context.Context, *Appliance) (*Appliance, error)
	// GetAppliance get SAML application
	GetAppliance(context.Context, *Appliance) (*Appliance, error)
	// ListAppliances lists  application
	ListAppliances(context.Context, *Tenant) (*Appliances, error)
	// DeleteAppliance deletes application
	DeleteAppliance(context.Context, *Appliance) (*EmptyReply, error)
	// RegisterAuthBroker registers Authbroker and HPCaas Roles for the given Tenant
	RegisterAuthBroker(context.Context, *AuthBrokerRequest) (*EmptyReply, error)
	// DeRegisterAuthBroker unregisters Authbroker and HPCaas Roles for the given Tenant
	DeRegisterAuthBroker(context.Context, *AuthBrokerRequest) (*EmptyReply, error)
	// ConfigureSAMLInHcp configures SAML in HCP
	ConfigureSAMLInHcp(context.Context, *SAMLConfigRequest) (*EmptyReply, error)
	// RemoveSiteAdminClaimInHCP removes Siteadmin Claim in HCP
	RemoveSiteAdminClaimInHCP(context.Context, *SAMLConfigRequest) (*EmptyReply, error)
}

// UnimplementedApplianceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplianceServiceServer struct {
}

func (*UnimplementedApplianceServiceServer) AddSAMLAppAssignments(context.Context, *AppAssignerRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSAMLAppAssignments not implemented")
}
func (*UnimplementedApplianceServiceServer) AddSAMLClaimMappings(context.Context, *AppSAMLClaimMappings) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSAMLClaimMappings not implemented")
}
func (*UnimplementedApplianceServiceServer) RemoveSAMLAppAssignments(context.Context, *AppAssignerRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSAMLAppAssignments not implemented")
}
func (*UnimplementedApplianceServiceServer) RemoveSAMLClaimMappings(context.Context, *AppSAMLClaimMappings) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSAMLClaimMappings not implemented")
}
func (*UnimplementedApplianceServiceServer) CreateAppliance(context.Context, *Appliance) (*Appliance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppliance not implemented")
}
func (*UnimplementedApplianceServiceServer) GetAppliance(context.Context, *Appliance) (*Appliance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppliance not implemented")
}
func (*UnimplementedApplianceServiceServer) ListAppliances(context.Context, *Tenant) (*Appliances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppliances not implemented")
}
func (*UnimplementedApplianceServiceServer) DeleteAppliance(context.Context, *Appliance) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliance not implemented")
}
func (*UnimplementedApplianceServiceServer) RegisterAuthBroker(context.Context, *AuthBrokerRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthBroker not implemented")
}
func (*UnimplementedApplianceServiceServer) DeRegisterAuthBroker(context.Context, *AuthBrokerRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterAuthBroker not implemented")
}
func (*UnimplementedApplianceServiceServer) ConfigureSAMLInHcp(context.Context, *SAMLConfigRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureSAMLInHcp not implemented")
}
func (*UnimplementedApplianceServiceServer) RemoveSiteAdminClaimInHCP(context.Context, *SAMLConfigRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSiteAdminClaimInHCP not implemented")
}

func RegisterApplianceServiceServer(s *grpc.Server, srv ApplianceServiceServer) {
	s.RegisterService(&_ApplianceService_serviceDesc, srv)
}

func _ApplianceService_AddSAMLAppAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAssignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).AddSAMLAppAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/AddSAMLAppAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).AddSAMLAppAssignments(ctx, req.(*AppAssignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_AddSAMLClaimMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSAMLClaimMappings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).AddSAMLClaimMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/AddSAMLClaimMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).AddSAMLClaimMappings(ctx, req.(*AppSAMLClaimMappings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_RemoveSAMLAppAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAssignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).RemoveSAMLAppAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/RemoveSAMLAppAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).RemoveSAMLAppAssignments(ctx, req.(*AppAssignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_RemoveSAMLClaimMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSAMLClaimMappings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).RemoveSAMLClaimMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/RemoveSAMLClaimMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).RemoveSAMLClaimMappings(ctx, req.(*AppSAMLClaimMappings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_CreateAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appliance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).CreateAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/CreateAppliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).CreateAppliance(ctx, req.(*Appliance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_GetAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appliance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).GetAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/GetAppliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).GetAppliance(ctx, req.(*Appliance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_ListAppliances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).ListAppliances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/ListAppliances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).ListAppliances(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_DeleteAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appliance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).DeleteAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/DeleteAppliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).DeleteAppliance(ctx, req.(*Appliance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_RegisterAuthBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).RegisterAuthBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/RegisterAuthBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).RegisterAuthBroker(ctx, req.(*AuthBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_DeRegisterAuthBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).DeRegisterAuthBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/DeRegisterAuthBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).DeRegisterAuthBroker(ctx, req.(*AuthBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_ConfigureSAMLInHcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAMLConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).ConfigureSAMLInHcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/ConfigureSAMLInHcp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).ConfigureSAMLInHcp(ctx, req.(*SAMLConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplianceService_RemoveSiteAdminClaimInHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAMLConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplianceServiceServer).RemoveSiteAdminClaimInHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApplianceService/RemoveSiteAdminClaimInHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplianceServiceServer).RemoveSiteAdminClaimInHCP(ctx, req.(*SAMLConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplianceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApplianceService",
	HandlerType: (*ApplianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSAMLAppAssignments",
			Handler:    _ApplianceService_AddSAMLAppAssignments_Handler,
		},
		{
			MethodName: "AddSAMLClaimMappings",
			Handler:    _ApplianceService_AddSAMLClaimMappings_Handler,
		},
		{
			MethodName: "RemoveSAMLAppAssignments",
			Handler:    _ApplianceService_RemoveSAMLAppAssignments_Handler,
		},
		{
			MethodName: "RemoveSAMLClaimMappings",
			Handler:    _ApplianceService_RemoveSAMLClaimMappings_Handler,
		},
		{
			MethodName: "CreateAppliance",
			Handler:    _ApplianceService_CreateAppliance_Handler,
		},
		{
			MethodName: "GetAppliance",
			Handler:    _ApplianceService_GetAppliance_Handler,
		},
		{
			MethodName: "ListAppliances",
			Handler:    _ApplianceService_ListAppliances_Handler,
		},
		{
			MethodName: "DeleteAppliance",
			Handler:    _ApplianceService_DeleteAppliance_Handler,
		},
		{
			MethodName: "RegisterAuthBroker",
			Handler:    _ApplianceService_RegisterAuthBroker_Handler,
		},
		{
			MethodName: "DeRegisterAuthBroker",
			Handler:    _ApplianceService_DeRegisterAuthBroker_Handler,
		},
		{
			MethodName: "ConfigureSAMLInHcp",
			Handler:    _ApplianceService_ConfigureSAMLInHcp_Handler,
		},
		{
			MethodName: "RemoveSiteAdminClaimInHCP",
			Handler:    _ApplianceService_RemoveSiteAdminClaimInHCP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authbroker.proto",
}
