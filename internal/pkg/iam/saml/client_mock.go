// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./client.go

package saml

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) CreateSAMLApp(ctx context.Context, token string, app *Application) error {
	ret := _m.ctrl.Call(_m, "CreateSAMLApp", ctx, token, app)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) CreateSAMLApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSAMLApp", arg0, arg1, arg2)
}

func (_m *MockClient) GetSAMLAppMetadata(ctx context.Context, token string, app Application) (string, error) {
	ret := _m.ctrl.Call(_m, "GetSAMLAppMetadata", ctx, token, app)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetSAMLAppMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSAMLAppMetadata", arg0, arg1, arg2)
}

func (_m *MockClient) CreateSAMLAppAssigner(ctx context.Context, token string, app Application, resourceIDs []string, permissions []string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateSAMLAppAssigner", ctx, token, app, resourceIDs, permissions)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CreateSAMLAppAssigner(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSAMLAppAssigner", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockClient) UpdateSAMLAppAssigner(ctx context.Context, token string, assignerID string, resourceIDs []string) error {
	ret := _m.ctrl.Call(_m, "UpdateSAMLAppAssigner", ctx, token, assignerID, resourceIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) UpdateSAMLAppAssigner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSAMLAppAssigner", arg0, arg1, arg2, arg3)
}

func (_m *MockClient) CreateSAMLClaimMappings(ctx context.Context, token string, app Application, claims []ClaimMappings) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateSAMLClaimMappings", ctx, token, app, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CreateSAMLClaimMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSAMLClaimMappings", arg0, arg1, arg2, arg3)
}

func (_m *MockClient) UpdateSAMLClaimMappings(ctx context.Context, token string, claimID string, claims []ClaimMappings) error {
	ret := _m.ctrl.Call(_m, "UpdateSAMLClaimMappings", ctx, token, claimID, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) UpdateSAMLClaimMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSAMLClaimMappings", arg0, arg1, arg2, arg3)
}

func (_m *MockClient) DeleteSAMLAppAssigner(ctx context.Context, token string, assignerID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSAMLAppAssigner", ctx, token, assignerID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteSAMLAppAssigner(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSAMLAppAssigner", arg0, arg1, arg2)
}

func (_m *MockClient) DeleteSAMLClaimMappings(ctx context.Context, token string, claimID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSAMLClaimMappings", ctx, token, claimID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteSAMLClaimMappings(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSAMLClaimMappings", arg0, arg1, arg2)
}

func (_m *MockClient) DeleteSAMLApp(ctx context.Context, token string, samlAppID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSAMLApp", ctx, token, samlAppID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteSAMLApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSAMLApp", arg0, arg1, arg2)
}
