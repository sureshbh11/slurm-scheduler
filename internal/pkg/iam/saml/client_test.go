// (C) Copyright 2020 Hewlett Packard Enterprise Development LP

package saml

import (
	"context"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/golang/mock/gomock"
	samlHttp "github.com/hpe-hcss/mlops/internal/pkg/common"
	"github.com/hpe-hcss/mlops/internal/pkg/iam"
)

func getMockApplication(name string) Application {
	mockApp := Application{}
	mockApp.Name = name
	mockApp.ID = "123456"
	mockApp.SSOAcsURL = "http://127.0.0.1"
	return mockApp
}

func Test_CreateSAMLApp(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockApplication := getMockApplication("mockAppSuccess")
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)

	mockAppsResponse := createApplicationRes{}
	mockAppsResponse.ID = "autogenerated ID"
	mockAppsResponse.Credentials.Signing.Kid = "mockKidID"
	mockHTTPResp, _ := iam.NewJSONResponse(200, mockAppsResponse)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	err := samlClient.CreateSAMLApp(mockContext, mockToken, &mockApplication)
	assert.Nil(t, err)
	assert.Equal(t, mockApplication.ID, mockAppsResponse.ID)
	assert.Equal(t, mockApplication.Kid, mockAppsResponse.Credentials.Signing.Kid)

	mockApplication = getMockApplication("mockAppFailure")
	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.CreateSAMLApp(mockContext, mockToken, &mockApplication)
	assert.Contains(t, err.Error(), errMsg)

	errResponse := map[string]string{"result": "errorResponse"}
	errAppResponse, _ := iam.NewJSONResponse(200, errResponse)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(errAppResponse, errors.New(errMsg)).Times(1)
	err = samlClient.CreateSAMLApp(mockContext, mockToken, &mockApplication)
	assert.Contains(t, err.Error(), errMsg)
}

func Test_GetSAMLAppMetadata(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockMetadata := "mock metadata"
	mockApplication := getMockApplication("mockAppSuccess")
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, mockMetadata)
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	resMetadata, err := samlClient.GetSAMLAppMetadata(mockContext, mockToken, mockApplication)
	assert.Nil(t, err)
	mockMetadata = "\"mock metadata\""
	assert.Equal(t, mockMetadata, resMetadata)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	resMetadata, err = samlClient.GetSAMLAppMetadata(mockContext, mockToken, mockApplication)
	assert.NotNil(t, err)
	assert.Equal(t, "", resMetadata)
}

func Test_CreateSAMLAppAssigner(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockApplication := getMockApplication("mockAppSuccess")
	mockResources := []string{"mockResource1", "mockResource2"}
	mockPermissions := []string{"mockPermission1", "mockPermission2"}
	mockResponse := responseID{ID: "successResponseID"}
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, mockResponse)
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	result, err := samlClient.CreateSAMLAppAssigner(mockContext, mockToken,
		mockApplication, mockResources, mockPermissions)
	assert.Nil(t, err)
	assert.Equal(t, mockResponse.ID, result)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	result, err = samlClient.CreateSAMLAppAssigner(mockContext, mockToken,
		mockApplication, mockResources, mockPermissions)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
	assert.Equal(t, "", result)
}

func Test_UpdateSAMLAppAssigner(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockAssignerID := "mockAssignerID"
	mockResources := []string{"mockResource1", "mockResource2"}
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, "Success")
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	err := samlClient.UpdateSAMLAppAssigner(mockContext, mockToken,
		mockAssignerID, mockResources)
	assert.Nil(t, err)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.UpdateSAMLAppAssigner(mockContext, mockToken,
		mockAssignerID, mockResources)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
}

func Test_CreateSAMLClaimMappings(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockApplication := getMockApplication("mockAppSuccess")
	mockClaimMappings := []ClaimMappings{{ClaimValue: "mockClaimValue1",
		ResourceID: "mockResourceID", Permissions: []string{"mockPermissions1"}}}
	mockResponse := responseID{ID: "successResponseID"}
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, mockResponse)
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	result, err := samlClient.CreateSAMLClaimMappings(mockContext, mockToken,
		mockApplication, mockClaimMappings)
	assert.Nil(t, err)
	assert.Equal(t, mockResponse.ID, result)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	result, err = samlClient.CreateSAMLClaimMappings(mockContext, mockToken,
		mockApplication, mockClaimMappings)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
	assert.Equal(t, "", result)
}

func Test_UpdateSAMLClaimMappings(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockClaimMappingID := "mockClaimMappingID"
	mockClaimMappings := []ClaimMappings{{ClaimValue: "mockClaimValue1",
		ResourceID: "mockResourceID", Permissions: []string{"mockPermissions1"}}}
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, "Success")
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	err := samlClient.UpdateSAMLClaimMappings(mockContext, mockToken,
		mockClaimMappingID, mockClaimMappings)
	assert.Nil(t, err)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.UpdateSAMLClaimMappings(mockContext, mockToken,
		mockClaimMappingID, mockClaimMappings)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
}

func Test_DeleteSAMLClaimMappings(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockClaimMappingID := "mockClaimMappingID"
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, "Success")
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	err := samlClient.DeleteSAMLClaimMappings(mockContext, mockToken,
		mockClaimMappingID)
	assert.Nil(t, err)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.DeleteSAMLClaimMappings(mockContext, mockToken,
		mockClaimMappingID)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
}

func Test_DeleteSAMLAppAssigner(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockAppAssignerID := "mockAppAssignerID"
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, "Success")
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	err := samlClient.DeleteSAMLAppAssigner(mockContext, mockToken,
		mockAppAssignerID)
	assert.Nil(t, err)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.DeleteSAMLAppAssigner(mockContext, mockToken, mockAppAssignerID)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
}

func Test_DeleteSAMLApp(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockContext := context.Background()
	mockToken := "mockToken"
	mockAppID := "mockApplicationID"
	mockHttpclient := samlHttp.NewMockHTTPClient(ctrl)
	mockHTTPResp, _ := iam.NewJSONResponse(200, "Success")
	samlClient := NewSAMLClient("http://127.0.0.1:8080", mockHttpclient)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(2)
	err := samlClient.DeleteSAMLApp(mockContext, mockToken, mockAppID)
	assert.Nil(t, err)

	errMsg := "HTTP Failure"
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.DeleteSAMLApp(mockContext, mockToken, mockAppID)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)

	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, nil).Times(1)
	mockHttpclient.EXPECT().Do(gomock.Any()).Return(mockHTTPResp, errors.New(errMsg)).Times(1)
	err = samlClient.DeleteSAMLApp(mockContext, mockToken, mockAppID)
	assert.NotNil(t, err)
	assert.Contains(t, err.Error(), errMsg)
}
